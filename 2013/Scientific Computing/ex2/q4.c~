#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<omp.h>
#include<time.h>
#include"McGrath.h"

int main(void){
	double ***psi, ***charge, ***tmp, ***prev, **slice, dx,results[2],times[2],pos[3];
	int i,j,k,n,N,conv,numRuns,sweeps[2];

	N = 8;
	psi = make_tensor(N,N,N);
	charge = make_tensor(N,N,N);
	tmp = make_tensor(N,N,N);
	prev = make_tensor(N,N,N);
	numRuns = 20;

	dx = 1.0/(double)N;

	for(i=0;i<=N;i++){
		for(j=0;j<=N;j++){
			for(k=0;k<=N;k++){
				if(i*dx<0.25&&j*dx<0.25&&k*dx<0.25){
					charge[i][j][k] = 200.0;
				} else if((i*dx==0.25&&j*dx<0.25&&k*dx<0.25)||(i*dx<0.25&&j*dx==0.25&&k*dx<0.25)||(i*dx<0.25&&j*dx<0.25&&k*dx==0.25)){
					charge[i][j][k] = 100.0;
				} else if((i*dx==0.25&&j*dx==0.25&&k*dx<0.25)||(i*dx==0.25&&j*dx<0.25&&k*dx==0.25)||(i*dx<0.25&&j*dx==0.25&&k*dx==0.25)){
					charge[i][j][k] = 50.0;
				} else if(i*dx==0.25&&j*dx==0.25&&k*dx==0.25){
					charge[i][j][k] = 25.0;
				}
			}
		}
	}

	// print table header
	printf("%6s\t%10s\t%10s\t%10s\t%10s\t%10s\t%10s\t%10s\t%10s\n", "N", "psi max", "max x", "max y", "max z", "t", "# sweeps", "t prev", "# sweeps");

	for(n=1;n<=numRuns;n++){

		// interpolate from previous psi
		for(i=0;i<=N;i++){
			for(j=0;j<=N;j++){
				for(k=0;k<=N;k++){
					psi[i][j][k] = prev[i][j][k];
				}
			}
		}	

		conv = 0;
		sweeps[0] = 0;
		timer(0);
		while(!conv){
			for(i=0;i<50;i++){
				while(slice[1][1]<1e5){
				RBSOR3D(psi,charge,N,tmp,0);				
				sweeps[0]+=1;
				slice  = psi[1];
				printf("omega = %lf\n", 2.0 - ((2.0*M_PI)/(double)N));
				displayMatrix(slice, N);}
			}
			conv = RBSOR3D(psi,charge,N,tmp,1);

		}
		times[0] = timer(-1);
		results[0] = amax3D(psi,N);
		argamax3D(psi,N,pos);

		// write results
		printf("%6d\t%10g\t%10g\t%10g\t%10g\t%10g\t%10d\t%10g\t%10d\n", N, results[0], dx*pos[0], dx*pos[1], dx*pos[2], times[0], sweeps[0], 0.0, 0);
		
		// save results for next iteration
		prev = growTensor(prev, N);
		for(i=0;i<=N;i++){
			for(j=0;j<=N;j++){
				for(k=0;k<=N;k++){
					prev[2*i][2*j][2*k] = psi[i][j][k];
				}
			}
		}

		// expand
		charge = growTensor(charge, N);
		psi = growTensor(psi, N);
		tmp = growTensor(tmp, N);
		N *= 2;
		dx = 1.0/(double)N;

		// assign values to charge
		for(i=0;i<=N;i++){
			for(j=0;j<=N;j++){
				for(k=0;k<=N;k++){
					if(i*dx<0.25&&j*dx<0.25&&k*dx<0.25){
						charge[i][j][k] = 200.0;
					} else if((i*dx==0.25&&j*dx<0.25&&k*dx<0.25)||(i*dx<0.25&&j*dx==0.25&&k*dx<0.25)||(i*dx<0.25&&j*dx<0.25&&k*dx==0.25)){
						charge[i][j][k] = 100.0;
					} else if((i*dx==0.25&&j*dx==0.25&&k*dx<0.25)||(i*dx==0.25&&j*dx<0.25&&k*dx==0.25)||(i*dx<0.25&&j*dx==0.25&&k*dx==0.25)){
						charge[i][j][k] = 50.0;
					} else if(i*dx==0.25&&j*dx==0.25&&k*dx==0.25){
						charge[i][j][k] = 25.0;
					}
				}
			}
		}

	}
}



int RBSOR3D(double ***psi, double ***charge, int N, double ***tmp, int check){
	double iter, diff, omega, dx;
	int i,j,k,conv;

	conv = 1;
	dx = 1.0/(double)N;
	omega = 2.0 - ((2.0*M_PI)/(double)N);
	//omega = 1.0;
	#pragma omp parallel private(i,j,k)
	{
	// grid 1
	#pragma omp for
	for(i=0;i<=N;i+=2){
		for(j=0;j<=N;j+=2){
			for(k=0;k<=N;k+=2){
				if(i==0||i==N||j==0||j==N||k==0||k==N){
					psi[i][j][k] = 0.0;
				}else{
					tmp[i][j][k] = (1.0-omega)*psi[i][j][k] + (omega/6.0)*(psi[i-1][j][k]+psi[i][j-1][k]+psi[i][j][k-1]+psi[i+1][j][k]+psi[i][j+1][k]+psi[i][j][k+1]+dx*dx*charge[i][j][k]);
				}
			}
		}
	}

	// grid 2
	#pragma omp for
	for(i=1;i<=N;i+=2){
		for(j=0;j<=N;j+=2){
			for(k=0;k<=N;k+=2){
				if(i==0||i==N||j==0||j==N||k==0||k==N){
					psi[i][j][k] = 0.0;
				}else{
					tmp[i][j][k] = (1.0-omega)*psi[i][j][k] +  (omega/6.0)*(psi[i-1][j][k]+psi[i][j-1][k]+psi[i][j][k-1]+psi[i+1][j][k]+psi[i][j+1][k]+psi[i][j][k+1]+dx*dx*charge[i][j][k]);
				}
			}
		}
	}

	// grid 3
	#pragma omp for
	for(i=0;i<=N;i+=2){
		for(j=1;j<=N;j+=2){
			for(k=0;k<=N;k+=2){
				if(i==0||i==N||j==0||j==N||k==0||k==N){
					psi[i][j][k] = 0.0;
				}else{
					tmp[i][j][k] = (1.0-omega)*psi[i][j][k] + (omega/6.0)*(psi[i-1][j][k]+psi[i][j-1][k]+psi[i][j][k-1]+psi[i+1][j][k]+psi[i][j+1][k]+psi[i][j][k+1]+dx*dx*charge[i][j][k]);
				}
			}
		}
	}

	// grid 4
	#pragma omp for
	for(i=0;i<=N;i+=2){
		for(j=0;j<=N;j+=2){
			for(k=1;k<=N;k+=2){
				if(i==0||i==N||j==0||j==N||k==0||k==N){
					psi[i][j][k] = 0.0;
				}else{
					tmp[i][j][k] =  (1.0-omega)*psi[i][j][k] + (omega/6.0)*(psi[i-1][j][k]+psi[i][j-1][k]+psi[i][j][k-1]+psi[i+1][j][k]+psi[i][j+1][k]+psi[i][j][k+1]+dx*dx*charge[i][j][k]);
				}
			}
		}
	}

	// grid 5
	#pragma omp for
	for(i=1;i<=N;i+=2){
		for(j=1;j<=N;j+=2){
			for(k=0;k<=N;k+=2){
				if(i==0||i==N||j==0||j==N||k==0||k==N){
					psi[i][j][k] = 0.0;
				}else{
					tmp[i][j][k] = (1.0-omega)*psi[i][j][k] + (omega/6.0)*(psi[i-1][j][k]+psi[i][j-1][k]+psi[i][j][k-1]+psi[i+1][j][k]+psi[i][j+1][k]+psi[i][j][k+1]+dx*dx*charge[i][j][k]);
				}
			}
		}
	}

	// grid 6
	#pragma omp for
	for(i=1;i<=N;i+=2){
		for(j=0;j<=N;j+=2){
			for(k=1;k<=N;k+=2){
				if(i==0||i==N||j==0||j==N||k==0||k==N){
					psi[i][j][k] = 0.0;
				}else{
					tmp[i][j][k] = (1.0-omega)*psi[i][j][k] + (omega/6.0)*(psi[i-1][j][k]+psi[i][j-1][k]+psi[i][j][k-1]+psi[i+1][j][k]+psi[i][j+1][k]+psi[i][j][k+1]+dx*dx*charge[i][j][k]);
				}
			}
		}
	}

	// grid 7
	#pragma omp for
	for(i=0;i<=N;i+=2){
		for(j=1;j<=N;j+=2){
			for(k=1;k<=N;k+=2){
				if(i==0||i==N||j==0||j==N||k==0||k==N){
					psi[i][j][k] = 0.0;
				}else{
					tmp[i][j][k] = (1.0-omega)*psi[i][j][k] + (omega/6.0)*(psi[i-1][j][k]+psi[i][j-1][k]+psi[i][j][k-1]+psi[i+1][j][k]+psi[i][j+1][k]+psi[i][j][k+1]+dx*dx*charge[i][j][k]);
				}
			}
		}
	}

	// grid 8
	#pragma omp for
	for(i=1;i<=N;i+=2){
		for(j=1;j<=N;j+=2){
			for(k=1;k<=N;k+=2){
				if(i==0||i==N||j==0||j==N||k==0||k==N){
					psi[i][j][k] = 0.0;
				}else{
					tmp[i][j][k] = (1.0-omega)*psi[i][j][k] + (omega/6.0)*(psi[i-1][j][k]+psi[i][j-1][k]+psi[i][j][k-1]+psi[i+1][j][k]+psi[i][j+1][k]+psi[i][j][k+1]+dx*dx*charge[i][j][k]);

				}
			}
		}
	}
	// end of parallel block
	}

	if(check==1){
		for(i=0;i<=N;i++){
			for(j=0;j<=N;j++){
				for(k=0;k<=N;k++){
					if(dabs(tmp[i][j][k] - psi[i][j][k]) > 1e-12){
						conv = 0;
						psi[i][j][k] = tmp[i][j][k];
						//printf("psi[%d][%d][%d] = %lf\tpsi[%d][%d][%d] = %lf\n", i,j,k,psi[i][j][k],i,j,k,tmp[i][j][k]);
					} else {
						psi[i][j][k] = tmp[i][j][k];
					}
				}
			}
		}
		return(conv);
	} else {
		for(i=0;i<=N;i++){
			for(j=0;j<=N;j++){
				for(k=0;k<=N;k++){
					psi[i][j][k] = tmp[i][j][k];
				}
			}
		}
		return(0);
	}

}

int interpPsi3D(double ***psi, double ***charge, int N){
	double dx;
	int i,j,k;

	dx = 1.0/(double)N;
	#pragma omp parallel private(i,j,k)
	{
	#pragma omp for
	for(i=1;i<=N;i++){
		for(j=1;j<=N;j++){
			for(k=1;k<=N;k++){
				if(i==0||i==N||j==0||j==N||k==0||k==N){
					psi[i][j][k] = 0.0;
				} else {
					psi[i][j][k] = (1.0/8.0)*(psi[i+1][j+1][k+1]+psi[i+1][j+1][k-1]+psi[i+1][j-1][k+1]+psi[i-1][j+1][k+1]+psi[i-1][j-1][k+1]+psi[i-1][j+1][k-1]+psi[i+1][j-1][k-1]+psi[i-1][j-1][k-1]);
				}
			}
		}
	}

	#pragma omp for
	for(i=1;i<=N;i++){
		for(j=0;j<=N;j++){
			for(k=0;k<=N;k++){
				if(i==0||i==N||j==0||j==N||k==0||k==N){
					psi[i][j][k] = 0.0;
				} else {
					psi[i][j][k] = (1.0/8.0)*(psi[i+1][j+1][k+1]+psi[i+1][j+1][k-1]+psi[i+1][j-1][k+1]+psi[i-1][j+1][k+1]+psi[i-1][j-1][k+1]+psi[i-1][j+1][k-1]+psi[i+1][j-1][k-1]+psi[i-1][j-1][k-1]);
				}
			}
		}
	}

	}
}

double ***growTensor(double ***t, int len){
	double *** tmp;
	int i, j, k;

	tmp = make_tensor(2*len, 2*len, 2*len);
	for(i = 0; i <= 8; i++){
		for(j = 0; j <= 8; j++){
			for(k = 0; k <= 8; k++){
				tmp[i][j][k] = t[i][j][k];
			}
		}
	}
	free(t[0][0]);
	free(t[0]);
	free(t);

	len *=2;
	t = make_tensor(len, len, len);
	for(i = 0; i <= 8; i++){
		for(j = 0; j <= 8; j++){
			for(k = 0; k <= 8; k++){
				t[i][j][k] = tmp[i][j][k];
			}
		}
	}
	free(tmp[0][0]);
	free(tmp[0]);
	free(tmp);
	return(t);
}

double ***make_tensor(int N1, int N2, int N3){
	double ***T;
	int i;

	T = malloc((N1+1)*sizeof(double**));
	for(i = 0; i <= N1; i++){
		T[i] = (double **)make_matrix(N2, N3);
	}
	return(T);
}


double RBSOR2D(double ** charge, double ** psi, int N, double omega){
	double **tmp;
	double dx, iter, diff;
	int i, j, conv;

	tmp = make_matrix(N,N);
	conv = 1;
	dx = 1.0/(double)N;
	omega = 2.0 - (2.0*M_PI)/(double)N;

	#pragma omp parallel private(i, j, iter, diff) shared(conv)
	{
	// colour 1
	#pragma omp for 
	for(i = 0; i <= N; i += 2){
		for(j = 0; j <= N; j += 2){
			if((i==0||i==N) || (j==0||j==N)){
				psi[i][j] = 0.0;
			} else {
				tmp[i][j] = psi[i][j];
				psi[i][j] = psi[i][j] + (omega/4.0)*(psi[i-1][j] + psi[i][j-1] - 4.0*psi[i][j] + psi[i+1][j] + psi[i][j+1] + dx*dx*charge[i][j]);	
			}
		}
	}

	// colour 2
	#pragma omp for 
	for(i = 1; i <= N; i += 2){
		for(j = 1; j <= N; j += 2){
			if((i==0||i==N) || (j==0||j==N)){
				psi[i][j] = 0.0;
			} else {
				tmp[i][j] = psi[i][j];
				psi[i][j] = psi[i][j] + (omega/4.0)*(psi[i-1][j] + psi[i][j-1] - 4.0*psi[i][j] + psi[i+1][j] + psi[i][j+1] + dx*dx*charge[i][j]);
			}
		}
	}

	// colour 3
	#pragma omp for 
	for(i = 0; i <= N; i += 2){
		for(j = 1; j <= N; j += 2){
			if((i==0||i==N) || (j==0||j==N)){
				psi[i][j] = 0.0;
			} else {
				tmp[i][j] = psi[i][j];
				psi[i][j] = psi[i][j] + (omega/4.0)*(psi[i-1][j] + psi[i][j-1] - 4.0*psi[i][j] + psi[i+1][j] + psi[i][j+1] + dx*dx*charge[i][j]);			}
		}
	}

	// colour 4
	#pragma omp for 
	for(i = 1; i <= N; i += 2){
		for(j = 0; j <= N; j += 2){
			if((i==0||i==N) || (j==0||j==N)){
				psi[i][j] = 0.0;
			} else {
				tmp[i][j] = psi[i][j];
				psi[i][j] = psi[i][j] + (omega/4.0)*(psi[i-1][j] + psi[i][j-1] - 4.0*psi[i][j] + psi[i+1][j] + psi[i][j+1] + dx*dx*charge[i][j]);			}
		}
	}
	}
	#pragma omp for
	for(i = 1; i < N; i++){
		for(j = 1; j < N; j++){
			if(dabs(tmp[i][j] - psi[i][j]) > 1e-12){
				conv = 0;
				break;
			}
		}
	}
	free(tmp[0]);
	free(tmp);
	return(conv);
}

int SOR2D(double ** charge, double ** psi, int N, double omega){
	double dx, iter, diff;
	int i, j, conv;

	conv = 1;
	dx = 1.0/(double)N;
	omega = 2.0 - (2.0*M_PI)/(double)N;

	for(i = 0; i <= N; i++){
		for(j = 0; j <= N; j++){
			// SOR calculation
			if((i == 0 || i == N) || (j == 0 || j == N)){
				psi[i][j] = 0.0;
				iter = 0.0;
			} else {
				iter = psi[i][j] + (omega/4.0)*(psi[i-1][j] + psi[i][j-1] - 4.0*psi[i][j] + psi[i+1][j] + psi[i][j+1] + dx*dx*charge[i][j]);
				diff = dabs(iter - psi[i][j]);
				// convergence testing
				if(conv == 1 && diff < 1e-12){ // sites up till i have converged, site i has converged
					conv = 1;
				} else if(conv == 1 && diff > 1e-12){ // sites up till i have converged, but i has not
					conv = 0;
				} else if(conv == 0){ // sites up till i have not converged
					conv = 0;
				} else {
					printf("error in convergence code\n");
				}
				psi[i][j] = iter;
			}
		}
	}
	return(conv);
}

int writeMatrix(double **M, int len, char *path){
	FILE *writeFile;
	int i, j;
	
	writeFile = fopen(path, "w");
	printf("File opened OK\n");
	for(i = 0; i <= len; i++){
		for(j = 0; j <= len; j++){
			fprintf(writeFile, "%g,", M[i][j]);
		}
	fprintf(writeFile, "\n");
	}

	fclose(writeFile);
	printf("File closed OK\n");
	return(0);
}

double **growMatrix(double **t, int len){
	double ** tmp;
	int i, j;

	tmp = make_matrix(2*len, 2*len);
	for(i = 0; i <= len; i++){
		for(j = 0; j < len; j++){
			tmp[2*i][2*j] = t[i][j];
		}
	}
	free(t[0]);
	free(t);

	len *=2;
	t = make_matrix(len, len);
	for(i = 0; i <= len; i++){
		for(j = 0; j <= len; j++){
			t[i][j] = tmp[i][j];
		}
	}
	free(tmp[0]);
	free(tmp);
	return(t);
}

double **make_matrix(int NR, int NC){ // from lecture notes
	double **M;
	int i, j, n;
	M = (double **)malloc((NR+1)*sizeof(double*));
	M[0] = (double *)malloc((NR+1)*(NC+1)*sizeof(double));
	for(n = 1; n <= NR; n++) M[n] = M[n-1] + NC+1;
	for(i = 0; i <= NR; i++){
		for(j = 0; j <= NC; j++){
			M[i][j] = 0.0;
		}
	}
	return(M);
}

void displayMatrix(double ** M, int len){
	int i, j;
	for(i = 0; i <= len; i++){
		for(j = 0; j <= len; j++){
			printf("%3.3g\t", M[i][j]);
		}
	printf("\n");
	}
}

double dabs(double x){
	if(x>0.0){return(x);}
	else if (x<0.0){return(-1.0*x);}
	else{return(0.0);}
}

int testgrid3D(double ***psi, double ***charge, int N, double ***tmp, int check){
	double iter, diff, omega, dx;
	int i,j,k,conv;

	conv = 1;
	dx = 1.0/(double)N;
	omega = 2.0 - (2.0*M_PI)/(double)N;
	
	#pragma omp parallel private(i,j,k,iter,diff)
	{
	// grid 1
	#pragma omp for
	for(i=0;i<=N;i+=2){
		for(j=0;j<=N;j+=2){
			for(k=0;k<=N;k+=2){
				psi[i][j][k] = 1;
			}
		}
	}

	// grid 2
	#pragma omp for
	for(i=1;i<=N;i+=2){
		for(j=0;j<=N;j+=2){
			for(k=0;k<=N;k+=2){
				if(psi[i][j][k] != 0.0) printf("ERROR");
				psi[i][j][k] = 2;
			}
		}
	}

	// grid 3
	#pragma omp for
	for(i=0;i<=N;i+=2){
		for(j=1;j<=N;j+=2){
			for(k=0;k<=N;k+=2){
				if(psi[i][j][k] != 0.0) printf("ERROR");
				psi[i][j][k] = 3;
			}
		}
	}

	// grid 4
	#pragma omp for
	for(i=0;i<=N;i+=2){
		for(j=0;j<=N;j+=2){
			for(k=1;k<=N;k+=2){
				if(psi[i][j][k] != 0.0) printf("ERROR");
				psi[i][j][k] = 4;
			}
		}
	}

	// grid 5
	#pragma omp for
	for(i=1;i<=N;i+=2){
		for(j=1;j<=N;j+=2){
			for(k=0;k<=N;k+=2){
				if(psi[i][j][k] != 0.0) printf("ERROR");
				psi[i][j][k] = 5;
			}
		}
	}

	// grid 6
	#pragma omp for
	for(i=1;i<=N;i+=2){
		for(j=0;j<=N;j+=2){
			for(k=1;k<=N;k+=2){
				if(psi[i][j][k] != 0.0) printf("ERROR");
				psi[i][j][k] = 6;
			}
		}
	}

	// grid 7
	#pragma omp for
	for(i=0;i<=N;i+=2){
		for(j=1;j<=N;j+=2){
			for(k=1;k<=N;k+=2){
				if(psi[i][j][k] != 0.0) printf("ERROR");
				psi[i][j][k] = 7;
			}
		}
	}

	// grid 8
	#pragma omp for
	for(i=1;i<=N;i+=2){
		for(j=1;j<=N;j+=2){
			for(k=1;k<=N;k+=2){
				if(psi[i][j][k] != 0.0) printf("ERROR");
				psi[i][j][k] = 8;
			}
		}
	}
	}
}

double timer(int T){ // from the lecture notes
	static double then = 0.0;
	double now, diff;

	now=(double)clock()/(double)CLOCKS_PER_SEC;
	diff=now-then;
	if(T<0) then=now;

	return(diff);
}

double amax(double *M, int len){
	double max;
	int i;

	max = M[0];
	for(i=1;i<=len;i++){
		if(M[i] > max){
			max = M[i];
		} else {
			continue;
		}
	}

	return(max);
}

int argamax(double *M, int len){
	double max;
	int i;

	max = M[0];
	for(i=1;i<=len;i++){
		if(M[i] > max){
			max = i;
		} else {
			continue;
		}
	}

	return((int)max);
}

double amax3D(double ***M, int len){
	double max;
	int i, j;

	max = M[0][0][0];
	for(i=0;i<=len;i++){
		for(j=0;j<=len;j++){
			if(amax(M[i][j], len) > max){
				max = amax(M[i][j], len);
			} else {
				continue;
			}
		}
	}
	return(max);
}


double *argamax3D(double ***M, int len, double pos[3]){
	double max;
	int i,j,k;

	max = M[0][0][0];
	for(i=0;i<=len;i++){
		for(j=0;j<=len;j++){
			for(k=0;k<=len;k++){
				if(M[i][j][k] > max){
					max = M[i][j][k];
					pos[0] = i;
					pos[1] = j;
					pos[2] = k;
				} else {
					continue;
				}
			}
		}
	}
	return(pos);
}
