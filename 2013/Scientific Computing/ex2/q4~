#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<omp.h>
#include"McGrath.h"

int main(void){
	double **T;

	T = make_tensor(8,8,8);

}

double **make_tensor(int N1, int N2, int N3){
	double **T;
	int i;

	t = (double**)malloc((N+1)*sizeof(double**));
	for(i = 0; i <= N1; i++){
		T[i] = make_matrix(N2, N3);
	}
	return(T);
}


double RBSOR2D(double ** charge, double ** psi, int N){
	double **tmp;
	double dx, iter, diff, omega;
	int i, j, conv;
	omp_lock_t lck;
	omp_init_lock(&lck);

	tmp = make_matrix(N,N);
	conv = 1;
	dx = 1.0/(double)N;
	omega = 2.0 - (2.0*M_PI)/(double)N;

	#pragma omp parallel private(i, j, iter, diff) shared(conv)
	{
	// colour 1
	#pragma omp for 
	for(i = 0; i <= N; i += 2){
		for(j = 0; j <= N; j += 2){
			if((i==0||i==N) || (j==0||j==N)){
				psi[i][j] = 0.0;
			} else {
				tmp[i][j] = psi[i][j];
				psi[i][j] = psi[i][j] + (omega/4.0)*(psi[i-1][j] + psi[i][j-1] - 4.0*psi[i][j] + psi[i+1][j] + psi[i][j+1] + dx*dx*charge[i][j]);	
			}
		}
	}

	// colour 2
	#pragma omp for 
	for(i = 1; i <= N; i += 2){
		for(j = 1; j <= N; j += 2){
			if((i==0||i==N) || (j==0||j==N)){
				psi[i][j] = 0.0;
			} else {
				tmp[i][j] = psi[i][j];
				psi[i][j] = psi[i][j] + (omega/4.0)*(psi[i-1][j] + psi[i][j-1] - 4.0*psi[i][j] + psi[i+1][j] + psi[i][j+1] + dx*dx*charge[i][j]);
			}
		}
	}

	// colour 3
	#pragma omp for 
	for(i = 0; i <= N; i += 2){
		for(j = 1; j <= N; j += 2){
			if((i==0||i==N) || (j==0||j==N)){
				psi[i][j] = 0.0;
			} else {
				tmp[i][j] = psi[i][j];
				psi[i][j] = psi[i][j] + (omega/4.0)*(psi[i-1][j] + psi[i][j-1] - 4.0*psi[i][j] + psi[i+1][j] + psi[i][j+1] + dx*dx*charge[i][j]);			}
		}
	}

	// colour 4
	#pragma omp for 
	for(i = 1; i <= N; i += 2){
		for(j = 0; j <= N; j += 2){
			if((i==0||i==N) || (j==0||j==N)){
				psi[i][j] = 0.0;
			} else {
				tmp[i][j] = psi[i][j];
				psi[i][j] = psi[i][j] + (omega/4.0)*(psi[i-1][j] + psi[i][j-1] - 4.0*psi[i][j] + psi[i+1][j] + psi[i][j+1] + dx*dx*charge[i][j]);			}
		}
	}
	}
	#pragma omp for
	for(i = 1; i < N; i++){
		for(j = 1; j < N; j++){
			if(dabs(tmp[i][j] - psi[i][j]) > 1e-12){
				conv = 0;
				break;
			}
		}
	}
	free(tmp[0]);
	free(tmp);
	return(conv);
}

int SOR2D(double ** charge, double ** psi, int N){
	double dx, iter, diff, omega;
	int i, j, conv;

	conv = 1;
	dx = 1.0/(double)N;
	omega = 2.0 - (2.0*M_PI)/(double)N;

	for(i = 0; i <= N; i++){
		for(j = 0; j <= N; j++){
			// SOR calculation
			if((i == 0 || i == N) || (j == 0 || j == N)){
				psi[i][j] = 0.0;
				iter = 0.0;
			} else {
				iter = psi[i][j] + (omega/4.0)*(psi[i-1][j] + psi[i][j-1] - 4.0*psi[i][j] + psi[i+1][j] + psi[i][j+1] + dx*dx*charge[i][j]);
				diff = dabs(iter - psi[i][j]);
				// convergence testing
				if(conv == 1 && diff < 1e-12){ // sites up till i have converged, site i has converged
					conv = 1;
				} else if(conv == 1 && diff > 1e-12){ // sites up till i have converged, but i has not
					conv = 0;
				} else if(conv == 0){ // sites up till i have not converged
					conv = 0;
				} else {
					printf("error in convergence code\n");
				}
				psi[i][j] = iter;
			}
		}
	}
	return(conv);
}

int writeMatrix(double **M, int len, char *path){
	FILE *writeFile;
	int i, j;
	
	writeFile = fopen(path, "w");
	printf("File opened OK\n");
	for(i = 0; i <= len; i++){
		for(j = 0; j <= len; j++){
			fprintf(writeFile, "%g,", M[i][j]);
		}
	fprintf(writeFile, "\n");
	}

	fclose(writeFile);
	printf("File closed OK\n");
	return(0);
}

double **growMatrix(double **t, int len){
	double ** tmp;
	int i, j;

	tmp = make_matrix(2*len, 2*len);
	for(i = 0; i <= len; i++){
		for(j = 0; j < len; j++){
			tmp[2*i][2*j] = t[i][j];
		}
	}
	free(t[0]);
	free(t);

	len *=2;
	t = make_matrix(len, len);
	for(i = 0; i <= len; i++){
		for(j = 0; j <= len; j++){
			t[i][j] = tmp[i][j];
		}
	}
	free(tmp[0]);
	free(tmp);
	return(t);
}

double **make_matrix(int NR, int NC){ // from lecture notes
	double **M;
	int i, j, n;
	M = (double **)malloc((NR+1)*sizeof(double*));
	M[0] = (double *)malloc((NR+1)*(NC+1)*sizeof(double));
	for(n = 1; n <= NR; n++) M[n] = M[n-1] + NC+1;
	for(i = 0; i <= NR; i++){
		for(j = 0; j <= NC; j++){
			M[i][j] = 0.0;
		}
	}
	return(M);
}

void displayMatrix(double ** M, int len){
	int i, j;
	for(i = 0; i <= len; i++){
		for(j = 0; j <= len; j++){
			printf("%3.3g\t", M[i][j]);
		}
	printf("\n");
	}
}

double dabs(double x){
	if(x>0.0){return(x);}
	else if (x<0.0){return(-1.0*x);}
	else{return(0.0);}
}
